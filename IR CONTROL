#include <IRremote.hpp>  

  


const int IR_RECEIVE_PIN = 9; // Define the pin connected to the IR receiver   

  

   

  

const int pwma = 5;   // keywords  

  

   

  

const int pwmb = 6;  

  

   

  

const int ain1 = 7;  

  

   

  

const int bin1 = 8;  

  

   

  

const int stb = 3;  

  

   

  

long lastsignalTime;  

  

   

  

int Speed;  

  

   

int carState = 0;          // Tracks the current state: 0 = stopped, 1 = forward, -1 = backward 

int carSpeed = 80;         // Initial speed of the car (range: 0 to 255) 

const int speedStep = 10;  // Increment for speed adjustment 

   

  

void forward(int Speed) {  // makes rbt go forward  

  

   

  

  digitalWrite(ain1, 1);  

  

   

  

  digitalWrite(bin1, 1);  

  

   

  

  analogWrite(pwma, Speed);  

  

   

  

  analogWrite(pwmb, Speed);  

  

   

  

}  

  

   

  

   

  

   

  

void  reverse(int Speed) {     // makes rbt go backwards  

  

   

  

  digitalWrite(ain1, 0);  

  

   

  

  digitalWrite(bin1, 0);  

  

   

  

  analogWrite(pwma, Speed);  

  

   

  

  analogWrite(pwmb, Speed);  

  

   

  

}  

  

   

  

   

  

   

  

void left(int Speed) {    // makes rbt spin left  

  

   

  

  digitalWrite(ain1, 1);  

  

   

  

  digitalWrite(bin1, 0);  

  

   

  

  analogWrite(pwma, Speed);  

  

   

  

  analogWrite(pwmb, Speed);  

  

   

  

}  

  

   

  

   

  

   

  

void right(int Speed) {     // makes rbt spin right  

  

   

  

  digitalWrite(ain1, 0);  

  

   

  

  digitalWrite(bin1, 1);  

  

   

  

  analogWrite(pwma, Speed);  

  

   

  

  analogWrite(pwmb, Speed);  

  

   

  

}  

  

   

  

   

  

   

  

void forwardleft(int Speed) {   // makes rbt turn left  

  

   

  

  digitalWrite(ain1, 1);  

  

   

  

  digitalWrite(bin1, 1);  

  

   

  

  analogWrite(pwma, Speed);  

  

   

  

  analogWrite(pwmb, Speed);  

  

   

  

}  

void forwardright(int Speed) {   // makes rbt turn right  

  digitalWrite(ain1, 1);  

  digitalWrite(bin1, 1);  

  analogWrite(pwma, Speed);  

  analogWrite(pwmb, Speed);  

}  
void  reverseleft(int Speed) {    // makes rbt turn left in reverse  

  digitalWrite(ain1, 0);  

  digitalWrite(bin1, 0);  

  analogWrite(pwma, Speed);  

  analogWrite(pwmb, Speed);  

}  
void  reverseright(int Speed) {   // makes rbt turn right in reverse  


  digitalWrite(ain1, 0);  

  digitalWrite(bin1, 0);  

  analogWrite(pwma, Speed);  

  analogWrite(pwmb, Speed);  
 

}  

  


void Stop() {        // stops rbt in place  


  digitalWrite(ain1, 1);  


  digitalWrite(bin1, 1);  
 

  analogWrite(pwma, 0);  

  

  analogWrite(pwmb, 0);  

}  

  



void setup() {  

  

   

  

  // put your setup code here, to run once:  

  

   

  

  pinMode(stb, OUTPUT);  

  

   

  

  pinMode(pwma, OUTPUT);  

  

   

  

  pinMode(ain1, OUTPUT);  

  

   

  

  pinMode(pwmb, OUTPUT);  

  

   

  

  pinMode(bin1, OUTPUT);  

  

   

  

  digitalWrite(stb, 1);  

  

   

  

  Serial.begin(9600);   

  

   

  

  IrReceiver.begin(IR_RECEIVE_PIN, ENABLE_LED_FEEDBACK); // Initialize the receiver   

  

   

  

  Serial.println("IR Receiver Initialized. Waiting for input...");   

  

}  

  

   

  

   

  

   

  

void loop() {  

  

   

  

  // put your main code here, to run repeatedly:  

  

  // Check if a signal is received  

  

  if (IrReceiver.decode()) {  

  

    unsigned long receivedCode = IrReceiver.decodedIRData.decodedRawData;  

  

   

  

    Serial.print("Received HEX Value: 0x");  

  

    Serial.println(receivedCode, HEX);  // Print the HEX value of the received signal  

  

   

  

    // Handle buttons  

  

    if (receivedCode == 0xB946FF00) {  // Forward button  

  

      Serial.println("Forward button pressed.");  

  

      forward(90);  

  

      carState = 1;  

  

    } else if (receivedCode == 0xEA15FF00) {  // Backward button  

  

      Serial.println("Backward button pressed.");  

  

      reverse(90);  

  

      carState = -1;  

  

    } else if (receivedCode == 0xBF40FF00) {  // Stop button  

  

      Serial.println("Stop button pressed.");  

  

      Stop();  

  

      carState = 0;  

  

    } else if (receivedCode == 0xBC43FF00) {  // Turn right button  

  

      Serial.println("Turn right button pressed.");  

  

      if (carState == 1) {  

  

        right(90);  

  

      } else if (carState == -1) {  

  

        reverseright(90);  

  

      }  

  

    } else if (receivedCode == 0xBB44FF00) {  // Turn left button  

  

      Serial.println("Turn left button pressed.");  

  

      if (carState == 1) {  

  

        left(90);  

  

      } else if (carState == -1) {  

  

        reverseleft(90);  

  

      }  

  

    } else if (receivedCode == 0xBD42FF00) {  // Speed up button  

  

      increaseSpeed();  

  

    } else if (receivedCode == 0xB54AFF00)  

  

{  // Speed down button  

  

      decreaseSpeed();  

  

    }  

  

   

  

    IrReceiver.resume();  // Prepare to receive the next signal  

  

  }  

  

}  

  

   

  

// Adjust speed up  

  

void increaseSpeed() {  

  

  carSpeed += speedStep;  

  

  if (carSpeed > 255) carSpeed = 255;  // Limit maximum speed  

  

  Serial.print("Speed increased to: ");  

  

  Serial.println(carSpeed);  

  

  applyCurrentState();  

  

}  

  

   

  

// Adjust speed down  

  

void decreaseSpeed() {  

  

  carSpeed -= speedStep;  

  

  if (carSpeed < 0) carSpeed = 0;  // Limit minimum speed  

  

  Serial.print("Speed decreased to: ");  

  

  Serial.println(carSpeed);  

  

  applyCurrentState();  

  

}  

  

   

  

// Reapply current state after speed change  

  

void applyCurrentState() {  

  

  if (carState == 1) {  

  

    forward(90);  

  

  } else if (carState == -1) {  

  

    reverse(90);  

  

  }  

  

}  

 
